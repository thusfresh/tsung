<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "tsung-1.0.dtd"
[
<!ENTITY duration "60">
<!ENTITY user_total "4">
<!ENTITY user_arrival "10">
<!ENTITY message_count "10">
<!ENTITY time_between_messages "5">
<!ENTITY wait_between_messages "true">

<!ENTITY hostname "localhost">
<!ENTITY port "4000">
<!ENTITY protocol "tcp">
]
>
<tsung loglevel="debug" version="1.0">
  <clients>
    <client host="localhost" use_controller_vm="true" maxusers="500" />
  </clients>

  <servers>
    <server host="&hostname;" port="&port;" type="&protocol;" />
  </servers>

  <load>
    <arrivalphase phase="1" duration="&duration;" unit="second">
      <users maxnumber="&user_total;" arrivalrate="&user_arrival;" unit="second" />
    </arrivalphase>
  </load>

  <options>
    <option name="file_server" id="users" value="users.csv"></option>
  </options>

  <sessions>

    <session name="foo" probability="100" type="ts_mainframe" bidi="true">

      <!-- ====================================================================
      == Setting up variables
      ===================================================================== -->

      <setdynvars sourcetype="value" value="&wait_between_messages;">
        <var name="wait_between_messages" />
      </setdynvars>

      <setdynvars sourcetype="value" value="50">
        <var name="avatar_size" />
      </setdynvars>

      <setdynvars sourcetype="value" value="26">
        <var name="bot_logo_height" />
      </setdynvars>

      <setdynvars sourcetype="value" value="1280">
        <var name="full_modal_size" />
      </setdynvars>

      <setdynvars sourcetype="value" value="460">
        <var name="preview_size" />
      </setdynvars>

      <setdynvars sourcetype="value" value="29">
        <var name="thumb_size" />
      </setdynvars>

      <setdynvars sourcetype="file" fileid="users" delimiter=";" order="iter">
        <var name="username" />
      </setdynvars>


      <!-- ====================================================================
      == Connecting
      ===================================================================== -->

      <transaction name="connect">
        <request>
          <mainframe type="connect"/>
        </request>
      </transaction>


      <!-- ====================================================================
      == Logging in
      ===================================================================== -->

      <transaction name="login">
        <request subst="true">
          <dyn_variable name="uref" jsonpath="uref"/>
          <mainframe type="login" username="%%_username%%" password="secret"/>
        </request>
      </transaction>


      <!-- ====================================================================
      == Loading initial data
      ===================================================================== -->

      <transaction name="loading">

        <request subst="true">
          <dyn_variable name="actor_id" jsonpath="data.session.actor.id"/>
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <number name="botLogoHeight">%%_bot_logo_height%%</number>
            </variables>
            <query>
              query RootContainerQuery($avatarSize: Int!, $botLogoHeight: Int!) {
                session {
                  ...RootContainer_session
                  id
                }
              }

              fragment RootContainer_session on Session {
                actor {
                  displayId
                  displayName
                  id
                  uref
                }
                counts {
                  badgeCount
                }
                enabledBots {
                  avatarUrl(size: $avatarSize)
                  logoUrl(height: $botLogoHeight)
                  color
                  displayId
                  displayName
                  id
                  menus {
                    iconUrl(size: $avatarSize)
                    payload
                    title
                    type
                    url
                  }
                  uref
                  flags {
                    supportsQuickMenus
                    supportsMentions
                    supportsSubscriptions
                  }
                }
                ownOrgs: memberships(filter: ME) {
                  id
                }
              }
            </query>
          </mainframe>
        </request>

        <request>
          <mainframe type="graphql">
            <variables>
              <list name="keys">
                <string>hasCompletedOnboarding</string>
                <string>rhelper_homescreen_basic</string>
                <string>helper_homescreen_team_invite</string>
                <string>helper_homescreen_team_setup</string>
                <string>webRegistration</string>
                <string>helper_todo_basic</string>
              </list>
            </variables>
            <query>
              query LoginStorage ($keys: [String]!) {
                values: getStorageKeys(keys: $keys)
              }
            </query>
          </mainframe>
        </request>

        <request subst="true">
          <dyn_variable name="account_id" jsonpath="data.session.actor.id"/>
          <dyn_variable name="cubicle_id" jsonpath="data.session.cubicle.id"/>
          <dyn_variable name="orgs" jsonpath="data.session.memberships"/>
          <dyn_variable name="spaces" jsonpath="data.session.memberships[0].joinedSpaces"/>
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
            </variables>
            <query>
              query HomeScreenQuery($avatarSize: Int!) {
                session {
                  ...HomeScreen_session
                  id
                }
              }

              fragment HomeScreen_session on Session {
                ...AccountSection_session
                ...BotSection_session
                ...DirectMessageSection_session
                ...OrgSection_session
                }

              fragment AccountSection_session on Session {
                ...CubicleItem_session
                ...InboxItem_session
                ...ToDoItem_session
                actor {
                  ...SelfHeader_actor
                  id
                }
                counts {
                  incomingAssignedActions
                  incompleteAssignedActions
                  mentionedInbox
                  unreadInbox
                }
                cubicle {
                  flags {
                    mentioned
                    unread
                    unseenActions
                  }
                  id
                }
                ownOrgs: memberships(filter: ME) {
                  ...AccountSection_ownOrg
                  ...SelfHeader_org
                  id
                  spaces(filter: JOINED) {
                    ...SpaceItem_space
                    conversationId
                    conversation {
                      flags {
                        mentioned
                        unread
                      }
                      subject
                      id
                    }
                  }
                }
                guestMemberships: memberships(filter: GUEST) {
                  ...AccountSection_guestOrg
                  id
                  spaces(filter: JOINED) {
                    ...SpaceItem_space
                    conversationId
                    conversation {
                      flags {
                        mentioned
                        unread
                      }
                      subject
                      id
                    }
                  }
                }
              }

              fragment BotSection_session on Session {
                id
                actor {
                  id
                }
                counts {
                  unreadBots
                }
                botMailbox(first: 10) {
                  pageInfo {
                    hasNextPage
                    endCursor
                    hasPreviousPage
                    startCursor
                  }
                  edges {
                    node {
                      ...BotItem_actor
                      conversation {
                        id
                        flags {
                          mentioned
                          unread
                        }
                      }
                      id
                      __typename
                    }
                    cursor
                  }
                }
              }

              fragment DirectMessageSection_session on Session {
                id
                actor {
                  id
                }
                counts {
                  mentionedDirect
                  unreadDirect
                }
                contactMailbox(first: 10) {
                  pageInfo {
                    hasNextPage
                    endCursor
                    hasPreviousPage
                    startCursor
                  }
                  edges {
                    node {
                      id
                      actor {
                        ...DirectMessageItem_actor
                        ... on Node {
                          id
                        }
                        id
                      }
                      direct {
                        ...DirectMessageItem_conversation
                        id
                        flags {
                          mentioned
                          unread
                        }
                      }
                      __typename
                    }
                    cursor
                  }
                }
              }

              fragment OrgSection_session on Session {
                memberships(filter: MEMBER) {
                  ...AvailableSpaces_org
                  ...OrgHeader_org
                  ...HomeHelperTeamInvite_org
                  actor {
                    __typename
                    displayId
                    ... on Node {
                      id
                    }
                  }
                  availableSpaces: spaces(filter: AVAILABLE) {
                    conversationId
                  }
                  id
                  joinedSpaces: spaces(filter: JOINED) {
                    ...SpaceItem_space
                    conversationId
                    conversation {
                      flags {
                        mentioned
                        unread
                      }
                      subject
                      id
                    }
                  }
                  selfRoles {
                    isAdmin
                    isGuest
                    isPending
                  }
                }
              }

              fragment AvailableSpaces_org on Org {
                spaces(filter: AVAILABLE) {
                  ...AvailableSpaces_space
                  conversationId
                  name
                }
              }

              fragment OrgHeader_org on Org {
                ...OrgMetrics_org
                id
                memberCount
                actor {
                  __typename
                  ...SimpleAvatarAccountHome_actor
                  displayId
                  displayName
                  ... on Node {
                    id
                  }
                }
                adminSettings {
                  pendingCount
                }
                selfRoles {
                  isAdmin
                  isPending
                }
              }

              fragment HomeHelperTeamInvite_org on Org {
                ...OrgMetrics_org
                adminSettings {
                  inviteUrl
                  joinsRestricted
                  invitedEmails
                }
                id
              }

              fragment SpaceItem_space on OrgSpace {
                conversationId
                conversation {
                  ...SimpleAvatarHome_conversation
                  flags {
                    mentioned
                    unread
                    unseenActions
                  }
                  moderatorSettings {
                    pendingParticipantsCount
                  }
                  subject
                  id
                }
              }

              fragment SimpleAvatarHome_conversation on Conversation {
                avatarUrl(size: $avatarSize)
                subject
              }

              fragment OrgMetrics_org on Org {
                actor {
                  __typename
                  displayId
                  displayName
                  ... on NativeActor {
                    subtype
                  }
                  ... on Node {
                    id
                  }
                }
                adminSettings {
                  guests {
                    actor {
                      __typename
                      ... on Node {
                        id
                      }
                    }
                  }
                }
                roster {
                  actor {
                    __typename
                    ... on Node {
                      id
                    }
                  }
                }
                selfRoles {
                  isAdmin
                  isMaster
                  isGuest
                  isPending
                }
                metricsSpaces: spaces {
                  conversationId
                }
              }

              fragment SimpleAvatarAccountHome_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }

              fragment AvailableSpaces_space on OrgSpace {
                conversationId
                conversation {
                  ...SimpleAvatarHome_conversation
                  subject
                  id
                }
              }

              fragment DirectMessageItem_actor on Actor {
                ...SimpleAvatarAccountHome_actor
                ... on Node {
                  id
                }
                displayId
                displayName
              }

              fragment DirectMessageItem_conversation on Conversation {
                id
                flags {
                  mentioned
                  unseenActions
                  unread
                }
              }

              fragment BotItem_actor on BotActor {
                ...SimpleAvatarAccountHome_actor
                conversation {
                  id
                  flags {
                    mentioned
                    unseenActions
                    unread
                  }
                }
                displayId
                displayName
                id
              }

              fragment CubicleItem_session on Session {
                cubicle {
                  id
                  flags {
                    mentioned
                    unread
                    unseenActions
                  }
                }
              }

              fragment InboxItem_session on Session {
                counts {
                  mentionedInbox
                  unreadInbox
                }
              }

              fragment ToDoItem_session on Session {
                counts {
                  incomingAssignedActions
                  incompleteAssignedActions
                }
              }

              fragment SelfHeader_actor on Actor {
                ...SimpleAvatarAccountHome_actor
                displayId
                displayName
                ... on Node {
                  id
                }
              }

              fragment AccountSection_ownOrg on Org {
                ...SelfHeader_org
                id
                selfRoles {
                  isGuest
                }
                spaces(filter: JOINED) {
                  ...AccountSection_joinedSpace
                }
              }

              fragment SelfHeader_org on Org {
                id
              }

              fragment AccountSection_guestOrg on Org {
                actor {
                  __typename
                  displayId
                  ... on Node {
                    id
                  }
                }
                id
                selfRoles {
                  isGuest
                }
                spaces(filter: JOINED) {
                  ...AccountSection_joinedSpace
                }
              }

              fragment AccountSection_joinedSpace on OrgSpace {
                ...SpaceItem_space
                conversationId
                conversation {
                  flags {
                    mentioned
                    unread
                    unseenActions
                  }
                  subject
                  id
                }
              }
            </query>
          </mainframe>
        </request>

        <setdynvars sourcetype="erlang" callback="ts_mainframe:random_org_id">
          <var name="org_id" />
        </setdynvars>
        <if var="org_id" eq="null">
          <abort/>
        </if>
        <setdynvars sourcetype="erlang" callback="ts_mainframe:random_space_id">
          <var name="space_id" />
        </setdynvars>
        <if var="space_id" eq="null">
          <abort/>
        </if>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name="input">
                <string name="state">AWAY</string>
                <string name="clientMutationId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <mutation>
              mutation UpdatePresence ($input: UpdatePresenceInput!) {
                updatePresence (input: $input) {
                  clientMutationId
                }
              }
            </mutation>
          </mainframe>
        </request>

        <request subst="true">
          <dyn_variable name="mailbox_id" jsonpath="data.session.mailbox.id"/>
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <string name="conversationType">DEFAULT</string>
              <number name="count">10</number>
              <null name="cursor"/>
              <string name="mailboxType">INBOX</string>
            </variables>
            <query>
              query MailboxScreenQuery($avatarSize: Int!, $conversationType: ConversationType!, $count: Int!, $cursor: String, $mailboxType: MailboxType!) {
                session {
                  ...MailboxView_session
                  actor {
                    id
                    displayId
                    displayName
                    avatarUrl
                  }
                  id
                }
              }

              fragment MailboxView_session on Session {
                mailbox(mailboxType: $mailboxType, conversationType: $conversationType) {
                  id
                  conversations(first: $count, after: $cursor) {
                    edges {
                      cursor
                      node {
                        ...ListRow_conversation
                        id
                        __typename
                      }
                    }
                    pageInfo {
                      hasNextPage
                      endCursor
                      hasPreviousPage
                      startCursor
                    }
                  }
                }
              }

              fragment ListRow_conversation on Conversation {
                ...SimpleAvatarConvo_conversation
                id
                subject
                type
                lastRelevantTime
                avatarUrl(size: $avatarSize)
                flags {
                  unread
                  mentioned
                  unseenActions
                }
                participants(all: true) {
                  __typename
                  actor {
                    __typename
                    ...SimpleAvatarAccount_actor
                    ... on Node {
                      id
                    }
                    displayId
                    displayName
                  }
                }
                lastRelevantMessage {
                  id
                  previewBody
                  actor {
                    __typename
                    displayId
                    displayName
                    ...SimpleAvatarAccount_actor
                    ... on Node {
                      id
                    }
                  }
                }
              }

              fragment SimpleAvatarConvo_conversation on Conversation {
                avatarUrl(size: $avatarSize)
                subject
              }

              fragment SimpleAvatarAccount_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }
            </query>
          </mainframe>
        </request>

      </transaction> <!-- Loading initial data -->


      <!-- ====================================================================
      == Initial subscriptions
      ===================================================================== -->

      <transaction name="subscriptions">

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <number name="botLogoHeight">%%_bot_logo_height%%</number>
              <object name="input">
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription RootContainerBotChangedSubscription($avatarSize: Int!, $botLogoHeight: Int!, $input: BotChangedInput!) {
                botChanged(input: $input) {
                  session {
                    enabledBots {
                      avatarUrl(size: $avatarSize)
                      logoUrl(height: $botLogoHeight)
                      color
                      displayId
                      displayName
                      id
                      menus {
                        iconUrl(size: $avatarSize)
                        payload
                        title
                        type
                        url
                      }
                      uref
                      flags {
                        supportsQuickMenus
                        supportsMentions
                        supportsSubscriptions
                      }
                    }
                    id
                  }
                }
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name="input">
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription RootContainerNotificationsSubscription($input: NotificationInput!) {
                notifications(input: $input) {
                  notificationMessage {
                    body
                    conversationId
                    title
                  }
                  session {
                    counts {
                      badgeCount
                    }
                    id
                  }
                }
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <object name="input">
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription HomeScreenMembershipChangedSubscription($avatarSize: Int!, $input: MembershipChangedInput!) {
                membershipChanged(input: $input) {
                  session {
                    ...HomeScreen_session
                    id
                  }
                }
              }

              fragment HomeScreen_session on Session {
                ...AccountSection_session
                ...BotSection_session
                ...DirectMessageSection_session
                ...OrgSection_session
              }

              fragment AccountSection_session on Session {
                ...CubicleItem_session
                ...InboxItem_session
                ...ToDoItem_session
                actor {
                  ...SelfHeader_actor
                  id
                }
                counts {
                  incomingAssignedActions
                  incompleteAssignedActions
                  mentionedInbox
                  unreadInbox
                }
                cubicle {
                  flags {
                    mentioned
                    unread
                    unseenActions
                  }
                  id
                }
                ownOrgs: memberships(filter: ME) {
                  ...AccountSection_ownOrg
                  ...SelfHeader_org
                  id
                  spaces(filter: JOINED) {
                    ...SpaceItem_space
                    conversationId
                    conversation {
                      flags {
                        mentioned
                        unread
                      }
                      subject
                      id
                    }
                  }
                }
                guestMemberships: memberships(filter: GUEST) {
                  ...AccountSection_guestOrg
                  id
                  spaces(filter: JOINED) {
                    ...SpaceItem_space
                    conversationId
                    conversation {
                      flags {
                        mentioned
                        unread
                      }
                      subject
                      id
                    }
                  }
                }
              }

              fragment BotSection_session on Session {
                id
                actor {
                  id
                }
                counts {
                  unreadBots
                }
                botMailbox(first: 10) {
                  pageInfo {
                    hasNextPage
                    endCursor
                    hasPreviousPage
                    startCursor
                  }
                  edges {
                    node {
                      ...BotItem_actor
                      conversation {
                        id
                        flags {
                          mentioned
                          unread
                        }
                      }
                      id
                      __typename
                    }
                    cursor
                  }
                }
              }

              fragment DirectMessageSection_session on Session {
                id
                actor {
                  id
                }
                counts {
                  mentionedDirect
                  unreadDirect
                }
                contactMailbox(first: 10) {
                  pageInfo {
                    hasNextPage
                    endCursor
                    hasPreviousPage
                    startCursor
                  }
                  edges {
                    node {
                      id
                      actor {
                        ...DirectMessageItem_actor
                        ... on Node {
                          id
                        }
                        id
                      }
                      direct {
                        ...DirectMessageItem_conversation
                        id
                        flags {
                          mentioned
                          unread
                        }
                      }
                      __typename
                    }
                    cursor
                  }
                }
              }

              fragment OrgSection_session on Session {
                memberships(filter: MEMBER) {
                  ...AvailableSpaces_org
                  ...OrgHeader_org
                  ...HomeHelperTeamInvite_org
                  actor {
                    __typename
                    displayId
                    ... on Node {
                      id
                    }
                  }
                  availableSpaces: spaces(filter: AVAILABLE) {
                    conversationId
                  }
                  id
                  joinedSpaces: spaces(filter: JOINED) {
                    ...SpaceItem_space
                    conversationId
                    conversation {
                      flags {
                        mentioned
                        unread
                      }
                      subject
                      id
                    }
                  }
                  selfRoles {
                    isAdmin
                    isGuest
                    isPending
                  }
                }
              }

              fragment AvailableSpaces_org on Org {
                spaces(filter: AVAILABLE) {
                  ...AvailableSpaces_space
                  conversationId
                  name
                }
              }

              fragment OrgHeader_org on Org {
                ...OrgMetrics_org
                id
                memberCount
                actor {
                  __typename
                  ...SimpleAvatarAccountHome_actor
                  displayId
                  displayName
                    ... on Node {
                    id
                  }
                }
                adminSettings {
                  pendingCount
                }
                selfRoles {
                  isAdmin
                  isPending
                }
              }

              fragment HomeHelperTeamInvite_org on Org {
                ...OrgMetrics_org
                adminSettings {
                  inviteUrl
                  joinsRestricted
                  invitedEmails
                }
                id
              }

              fragment SpaceItem_space on OrgSpace {
                conversationId
                conversation {
                  ...SimpleAvatarHome_conversation
                  flags {
                    mentioned
                    unread
                    unseenActions
                  }
                  moderatorSettings {
                    pendingParticipantsCount
                  }
                  subject
                  id
                }
              }

              fragment SimpleAvatarHome_conversation on Conversation {
                avatarUrl(size: $avatarSize)
                subject
              }

              fragment OrgMetrics_org on Org {
                actor {
                  __typename
                  displayId
                  displayName
                  ... on NativeActor {
                    subtype
                  }
                  ... on Node {
                    id
                  }
                }
                adminSettings {
                  guests {
                    actor {
                      __typename
                      ... on Node {
                        id
                      }
                    }
                  }
                }
                roster {
                  actor {
                    __typename
                    ... on Node {
                      id
                    }
                  }
                }
                selfRoles {
                  isAdmin
                  isMaster
                  isGuest
                  isPending
                }
                metricsSpaces: spaces {
                  conversationId
                }
              }

              fragment SimpleAvatarAccountHome_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }

              fragment AvailableSpaces_space on OrgSpace {
                conversationId
                conversation {
                  ...SimpleAvatarHome_conversation
                  subject
                  id
                }
              }

              fragment DirectMessageItem_actor on Actor {
                ...SimpleAvatarAccountHome_actor
                ... on Node {
                  id
                }
                displayId
                displayName
              }

              fragment DirectMessageItem_conversation on Conversation {
                id
                flags {
                  mentioned
                  unseenActions
                  unread
                }
              }

              fragment BotItem_actor on BotActor {
                ...SimpleAvatarAccountHome_actor
                conversation {
                  id
                  flags {
                    mentioned
                    unseenActions
                    unread
                  }
                }
                displayId
                displayName
                id
              }

              fragment CubicleItem_session on Session {
                cubicle {
                  id
                  flags {
                    mentioned
                    unread
                    unseenActions
                  }
                }
              }

              fragment InboxItem_session on Session {
                counts {
                  mentionedInbox
                  unreadInbox
                }
              }

              fragment ToDoItem_session on Session {
                counts {
                  incomingAssignedActions
                  incompleteAssignedActions
                }
              }

              fragment SelfHeader_actor on Actor {
                ...SimpleAvatarAccountHome_actor
                displayId
                displayName
                ... on Node {
                  id
                }
              }

              fragment AccountSection_ownOrg on Org {
                ...SelfHeader_org
                id
                selfRoles {
                  isGuest
                }
                spaces(filter: JOINED) {
                  ...AccountSection_joinedSpace
                }
              }

              fragment SelfHeader_org on Org {
                id
              }

              fragment AccountSection_guestOrg on Org {
                actor {
                  __typename
                  displayId
                  ... on Node {
                    id
                  }
                }
                id
                selfRoles {
                  isGuest
                }
                spaces(filter: JOINED) {
                  ...AccountSection_joinedSpace
                }
              }

              fragment AccountSection_joinedSpace on OrgSpace {
                ...SpaceItem_space
                conversationId
                conversation {
                  flags {
                    mentioned
                    unread
                    unseenActions
                  }
                  subject
                  id
                }
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <object name="input">
                <null name="cursor"/>
                <string name="mailboxId">%%_mailbox_id%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription MailboxViewChangedSubscription($avatarSize: Int!, $input: MailboxChangedInput!) {
                mailboxChanged(input: $input) {
                  added {
                    node {
                      ...ListRow_conversation
                      id
                    }
                  }
                  bumped {
                    node {
                      ...ListRow_conversation
                        id
                      }
                    }
                    changed {
                      ...ListRow_conversation
                      id
                  }
                  removed
                }
              }

              fragment ListRow_conversation on Conversation {
                ...SimpleAvatarConvo_conversation
                id
                subject
                type
                lastRelevantTime
                avatarUrl(size: $avatarSize)
                flags {
                  unread
                  mentioned
                  unseenActions
                }
                participants(all: true) {
                  __typename
                  actor {
                    __typename
                    ...SimpleAvatarAccount_actor
                    ... on Node {
                      id
                    }
                    displayId
                    displayName
                  }
                }
                lastRelevantMessage {
                  id
                  previewBody
                  actor {
                    __typename
                    displayId
                    displayName
                    ...SimpleAvatarAccount_actor
                    ... on Node {
                      id
                    }
                  }
                }
              }

              fragment SimpleAvatarConvo_conversation on Conversation {
                avatarUrl(size: $avatarSize)
                subject
              }

              fragment SimpleAvatarAccount_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <object name="input">
                <string name="accountId">%%_account_id%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription AccountSectionSelfJoinedSpacesChangedSubscription($avatarSize: Int!, $input: JoinedSpacesChangedInput!) {
                joinedSpacesChanged(input: $input) {
                  org {
                  ...AccountSection_ownOrg
                    id
                  }
                }
              }

              fragment AccountSection_ownOrg on Org {
                ...SelfHeader_org
                id
                selfRoles {
                  isGuest
                }
                spaces(filter: JOINED) {
                  ...AccountSection_joinedSpace
                }
              }

              fragment SelfHeader_org on Org {
                id
              }

              fragment AccountSection_joinedSpace on OrgSpace {
                ...SpaceItem_space
                conversationId
                conversation {
                  flags {
                    mentioned
                    unread
                    unseenActions
                  }
                  subject
                  id
                }
              }

              fragment SpaceItem_space on OrgSpace {
                conversationId
                conversation {
                  ...SimpleAvatarHome_conversation
                  flags {
                    mentioned
                    unread
                    unseenActions
                  }
                  moderatorSettings {
                    pendingParticipantsCount
                  }
                  subject
                  id
                }
              }

              fragment SimpleAvatarHome_conversation on Conversation {
                avatarUrl(size: $avatarSize)
                subject
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <object name="input">
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription BotSectionBotMailboxChangedSubscription($avatarSize: Int!, $input: BotMailboxChangedInput!) {
                botMailboxChanged(input: $input) {
                  added {
                    node {
                      ...BotSection_bot
                      id
                    }
                  }
                  bumped {
                    node {
                      ...BotSection_bot
                      id
                    }
                  }
                  changed {
                    ...BotSection_bot
                    id
                  }
                  removed
                }
              }

              fragment BotSection_bot on BotActor {
                ...BotItem_actor
                conversation {
                  id
                  flags {
                    mentioned
                    unseenActions
                    unread
                  }
                }
                id
              }

              fragment BotItem_actor on BotActor {
                ...SimpleAvatarAccountHome_actor
                conversation {
                  id
                  flags {
                    mentioned
                    unseenActions
                    unread
                  }
                }
                displayId
                displayName
                id
              }

              fragment SimpleAvatarAccountHome_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <object name="input">
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription DirectMessageSectionNewContactSubscription($avatarSize: Int!, $input: NewContactInput!) {
                newContact(input: $input) {
                  edge {
                    __typename
                    node {
                      __typename
                      id
                      ...DirectMessageSection_contact
                    }
                  }
                }
              }

              fragment DirectMessageSection_contact on ContactConversation {
                id
                actor {
                  ...DirectMessageItem_actor
                  ... on Node {
                    id
                  }
                  id
                }
                direct {
                  ...DirectMessageItem_conversation
                  id
                  flags {
                    mentioned
                    unseenActions
                    unread
                  }
                }
              }

              fragment DirectMessageItem_actor on Actor {
                ...SimpleAvatarAccountHome_actor
                ... on Node {
                  id
                }
                displayId
                displayName
              }

              fragment DirectMessageItem_conversation on Conversation {
                id
                flags {
                  mentioned
                  unseenActions
                  unread
                }
              }

              fragment SimpleAvatarAccountHome_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <object name="input">
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription DirectMessageSectionContactMailboxChangedSubscription($avatarSize: Int!, $input: ContactMailboxChangedInput!) {
                contactMailboxChanged(input: $input) {
                  added {
                    node {
                    id
                      ...DirectMessageSection_contact
                    }
                  }
                  bumped {
                    node {
                      id
                      ...DirectMessageSection_contact
                    }
                  }
                  changed {
                    ...DirectMessageSection_contact
                    id
                  }
                  removed
                }
              }

              fragment DirectMessageSection_contact on ContactConversation {
                id
                actor {
                  ...DirectMessageItem_actor
                  ... on Node {
                    id
                  }
                  id
                }
                direct {
                  ...DirectMessageItem_conversation
                  id
                  flags {
                    mentioned
                    unseenActions
                    unread
                  }
                }
              }

              fragment DirectMessageItem_actor on Actor {
                ...SimpleAvatarAccountHome_actor
                ... on Node {
                  id
                }
                displayId
                displayName
              }

              fragment DirectMessageItem_conversation on Conversation {
                id
                flags {
                  mentioned
                  unseenActions
                  unread
                }
              }

              fragment SimpleAvatarAccountHome_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <object name="input">
                <string name="actorId">%%_actor_id%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription SelfHeaderProfileChangedSubscription($avatarSize: Int!, $input: ProfileChangedInput!) {
                profileChanged(input: $input) {
                  actor {
                    ...SelfHeader_actor
                    id
                  }
                }
              }

              fragment SelfHeader_actor on Actor {
                ...SimpleAvatarAccountHome_actor
                displayId
                displayName
                ... on Node {
                  id
                }
              }

              fragment SimpleAvatarAccountHome_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name="input">
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription InboxItemNotificationsSubscription($input: NotificationInput!) {
                notifications(input: $input) {
                  session {
                  ...InboxItem_session
                  id
                  }
                }
              }

              fragment InboxItem_session on Session {
                counts {
                  mentionedInbox
                  unreadInbox
                }
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name="input">
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription ToDoItemNotificationSubscription($input: NotificationInput!) {
                notifications(input: $input) {
                  session {
                    ...ToDoItem_session
                    id
                  }
                }
              }

              fragment ToDoItem_session on Session {
                counts {
                  incomingAssignedActions
                  incompleteAssignedActions
                }
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name="input">
                <string name="conversationId">%%_cubicle_id%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription CubicleItemFlagsChangedSubscription($input: ConversationFlagsChangedInput!) {
                conversationFlagsChanged(input: $input) {
                  conversation {
                    flags {
                      mentioned
                      unread
                    }
                    id
                  }
                }
              }
            </subscription>
          </mainframe>
        </request>

      </transaction> <!-- Initial subscriptions -->


      <!-- ====================================================================
      == Loading space
      ===================================================================== -->

      <transaction name="loading_space">

        <request subst="true">
          <!-- Not sure what cursor to get yet -->
          <dyn_variable name="space_cursor" jsonpath="data.conversation.messages.edges[0].cursor"/>
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <number name="botLogoHeight">%%_bot_logo_height%%</number>
              <number name="count">30</number>
              <null name="cursor"/>
              <number name="fullModalSize">%%_full_modal_size%%</number>
              <string name="id">%%_space_id%%</string>
              <number name="previewSize">%%_preview_size%%</number>
              <number name="thumbSize">%%_thumb_size%%</number>
            </variables>
            <query>
              query ConversationScreenQuery($avatarSize: Int!, $botLogoHeight: Int!, $count: Int!, $cursor: String, $fullModalSize: Int!, $id: ID!, $previewSize: Int!, $thumbSize: Int!) {
                conversation: node(id: $id) {
                  __typename
                  ...ConversationScreen_conversation
                  id
                }
              }

              fragment ConversationScreen_conversation on Conversation {
                ...ConversationView_conversation
              }

              fragment ConversationView_conversation on Conversation {
                ...ComposeContainer_conversation
                ...ConversationActivity_conversation
                ...ConversationHeader_conversation
                ...ConversationMetrics_conversation
                ...ConvoMessagesView_conversation
                ...ParticipantList_conversation
                ...ConvoHeader_conversation
                ...ConvoOptions_conversation
                ...ChangeSubject_conversation
                ...EditConvoRoles_conversation
                cid
                id
                locked
                messages(last: $count, before: $cursor) {
                  edges {
                    cursor
                    node {
                      __typename
                      id
                    }
                  }
                  pageInfo {
                    hasPreviousPage
                    startCursor
                    endCursor
                    hasNextPage
                  }
                }
                owner {
                  __typename
                  displayId
                  displayName
                  uref
                  ... on Node {
                    id
                  }
                }
                participants(all: true) {
                  __typename
                  ...BotSubscriptionsModal_bot
                  ...EditConvoRoles_participant
                  ... on BotParticipant {
                    subscriptionCount
                  }
                  actor {
                    __typename
                    type
                    ... on BotActor {
                      logoUrl(height: $botLogoHeight)
                      color
                      flags {
                        supportsMentions
                        supportsQuickMenus
                      }
                      menus {
                        iconUrl(size: $avatarSize)
                        payload
                        title
                        type
                        url
                      }
                    }
                    avatarUrl(size: $avatarSize)
                    displayId
                    displayName
                    uref
                    ... on Node {
                      id
                    }
                  }
                }
                selfParticipating
                selfRoles {
                  isModerator
                }
                selfOrgRoles {
                  isMaster
                  isAdmin
                }
                subject
                type
              }

              fragment ComposeContainer_conversation on Conversation {
                ...ConversationMetrics_conversation
                id
                type
                participants(all: true) {
                  __typename
                  type
                  actor {
                    __typename
                    ...TargetActorMetrics_actor
                    type
                    displayId
                    displayName
                    avatarUrl(size: $avatarSize)
                    ... on BotActor {
                      flags {
                      supportsMentions
                      }
                    }
                    ... on Node {
                      id
                    }
                  }
                }
              }

              fragment ConversationActivity_conversation on Conversation {
                type
                activities {
                  actors(filter: COMPOSING, max: 6) {
                    __typename
                    displayId
                    ... on Node {
                      id
                    }
                  }
                  total(filter: COMPOSING)
                }
              }

              fragment ConversationHeader_conversation on Conversation {
                ...SimpleAvatarConvo_conversation
                participantCount
                avatarUrl(size: $avatarSize)
                moderatorSettings {
                  pendingParticipantsCount
                }
                participants(all: true) {
                  __typename
                  actor {
                    __typename
                    ...SimpleAvatarAccount_actor
                    avatarUrl(size: $avatarSize)
                    displayName
                    displayId
                    ... on Node {
                      id
                    }
                  }
                }
                subject
                type
              }

              fragment ConversationMetrics_conversation on Conversation {
                subject
                type
                access
                autojoin
                participantCount
                selfParticipating
                owner {
                  __typename
                  displayId
                  displayName
                  ... on NativeActor {
                    subtype
                  }
                  ... on Node {
                    id
                  }
                }
                selfOrgRoles {
                  isAdmin
                  isGuest
                  isMaster
                  isPending
                }
                selfRoles {
                  isModerator
                }
              }

              fragment ConvoMessagesView_conversation on Conversation {
                ...BasicMessage_conversation
                ...ComposeContainer_conversation
                ...ConversationActivity_conversation
                ...ConversationHeader_conversation
                ...ConversationMetrics_conversation
                ...OnboardingMessage_conversation
                id
                autojoin
                lastMessageIndex
                mentions {
                  newest
                  oldest
                }
                messages(last: $count, before: $cursor) {
                  edges {
                    cursor
                    node {
                      ...BasicMessage_message
                      ...SysMessage_message
                      actor {
                        __typename
                        ... on Node {
                          id
                        }
                      }
                      availableActions {
                        id
                      }
                      creationTime
                      id
                      index
                      source
                      __typename
                    }
                  }
                  pageInfo {
                    hasPreviousPage
                    startCursor
                    endCursor
                    hasNextPage
                  }
                }
                pointer
                selfOrgRoles {
                  isAdmin
                  isMaster
                }
                selfParticipating
                selfRoles {
                  isModerator
                }
                subject
                type
              }

              fragment ParticipantList_conversation on Conversation {
                id
                locked
                participants(all: true) {
                  __typename
                  ...ParticipantBot_participant
                  ...ParticipantHuman_participant
                  ... on BotParticipant {
                    subscriptionCount
                  }
                  type
                  actor {
                    __typename
                    ... on BotActor {
                      flags {
                      supportsSubscriptions
                      }
                    }
                    ... on Node {
                      id
                    }
                  }
                }
                selfParticipating
                selfRoles {
                  isModerator
                }
                subject
                type
              }

              fragment ConvoHeader_conversation on Conversation {
                ...SimpleAvatarConvo_conversation
                id
                type
                subject
                access
                ownerOrgId
                participantCount
                avatarUrl(size: $avatarSize)
                owner {
                  __typename
                  displayId
                  ... on Node {
                    id
                  }
                }
                participants(all: true) {
                  __typename
                  type
                  ... on BotParticipant {
                    subscriptionCount
                  }
                  actor {
                    __typename
                    ...SimpleAvatarAccount_actor
                    displayId
                    displayName
                    avatarUrl(size: $avatarSize)
                    ... on Node {
                      id
                    }
                    ... on BotActor {
                      flags {
                        supportsSubscriptions
                      }
                    }
                  }
                }
              }

              fragment ConvoOptions_conversation on Conversation {
                ...isLobby_conversation
                id
                type
                subject
                access
                locked
                autojoin
                selfParticipating
                participantCount
                moderatorSettings {
                  pendingParticipantsCount
                }
                selfOrgRoles {
                  isGuest
                  isAdmin
                  isMaster
                  isMe
                  isPending
                }
                selfRoles {
                  isModerator
                }
                owner {
                  __typename
                  ... on Node {
                    id
                  }
                }
              }

              fragment ChangeSubject_conversation on Conversation {
                id
                type
                subject
              }

              fragment EditConvoRoles_conversation on Conversation {
                ...ConversationMetrics_conversation
                type
                id
                selfRoles {
                  isModerator
                }
                selfOrgRoles {
                  isGuest
                  isAdmin
                  isMaster
                }
              }

              fragment BotSubscriptionsModal_bot on BotParticipant {
                actor {
                  __typename
                  displayId
                  uref
                  ... on Node {
                    id
                  }
                }
                subscriptions {
                  creator {
                    displayName
                    id
                  }
                  name
                  subId
                }
              }

              fragment EditConvoRoles_participant on Participant {
                actor {
                  __typename
                  ...TargetActorMetrics_actor
                  ... on Node {
                    id
                  }
                }
                type
                ... on NativeParticipant {
                  isModerator
                }
              }

              fragment TargetActorMetrics_actor on Actor {
                displayId
                displayName
                uref
              }

              fragment isLobby_conversation on Conversation {
                autojoin
                subject
                ownerOrgId
              }

              fragment SimpleAvatarConvo_conversation on Conversation {
                avatarUrl(size: $avatarSize)
                subject
              }

              fragment SimpleAvatarAccount_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }

              fragment ParticipantBot_participant on Participant {
                ... on BotParticipant {
                  actor {
                    __typename
                    ...SimpleAvatarAccount_actor
                    displayId
                    uref
                    ... on Node {
                      id
                    }
                    ... on BotActor {
                      flags {
                        supportsSubscriptions
                      }
                    }
                  }
                  subscriptionCount
                }
              }

              fragment ParticipantHuman_participant on NativeParticipant {
                actor {
                  __typename
                  ...SimpleAvatarAccount_actor
                  ... on NativeActor {
                    id
                  }
                  displayId
                  ... on Node {
                    id
                  }
                }
                isModerator
              }

              fragment BasicMessage_conversation on Conversation {
                ...AttachmentImage_conversation
                selfParticipating
                type
              }

              fragment OnboardingMessage_conversation on Conversation {
                ...InviteToOrgMessage_conversation
                type
              }

              fragment BasicMessage_message on Message {
                ...AckButton_message
                ...AttachmentImage_message
                ...BotBlock_message
                ...PreviewBlock_message
                ...TextBlock_message
                actor {
                  __typename
                  ...SimpleAvatarAccount_actor
                  displayId
                  displayName
                  ... on Node {
                    id
                  }
                }
                blocks {
                  __typename
                  ... on MessageBlockText {
                    ...TextBlock_block
                    type
                    key
                  }
                  ... on MessageBlockObject {
                    references {
                      __typename
                      ... on MessageReferenceAttachment {
                        attachment {
                          id
                          mimetype
                          ...AttachmentFile_attachment
                          ...AttachmentImage_attachment
                        }
                      }
                      ... on MessageReferenceLink {
                        metadata
                        url
                      }
                    }
                    type
                    key
                  }
                  ... on MessageBlockUiPayload {
                    key
                    type
                    uiPayload {
                      ui
                    }
                  }
                  ... on MessageBlockPreview {
                    link
                    previews {
                      ...PreviewBlock_previews
                    }
                    type
                    key
                  }
                }
                id
              }

              fragment SysMessage_message on Message {
                ...ActionCubicleMessage_message
                ...ConvoCubicleMessage_message
                ...ConvoSysMessage_message
                ...OrgCubicleMessage_message
                creationTime
                type
              }

              fragment ActionCubicleMessage_message on Message {
                type
                creationTime
                actor {
                  __typename
                  displayId
                  displayName
                  ... on Node {
                    id
                  }
                }
                extra {
                  __typename
                  ... on MessageExtraAction {
                    actionTitle
                    conversationSubject
                    conversationType
                    action {
                      title
                      originId
                      conversation {
                        subject
                        type
                        id
                      }
                      id
                    }
                  }
                }
              }

              fragment ConvoCubicleMessage_message on Message {
                type
                creationTime
                actor {
                  __typename
                  ...SimpleAvatarAccount_actor
                  displayId
                  displayName
                  ... on Node {
                    id
                  }
                }
                extra {
                  __typename
                  ... on MessageExtraConvo {
                    conversationSubject
                    conversationType
                    conversation {
                      ...SimpleAvatarConvo_conversation
                      type
                      subject
                      participantCount
                      id
                    }
                  }
                  ... on MessageExtraConvoMessage {
                    conversationSubject
                    conversationType
                    messageBody
                    conversation {
                      ...SimpleAvatarConvo_conversation
                      type
                      subject
                      participantCount
                      id
                    }
                    message {
                      id
                      blocks {
                        __typename
                        ... on MessageBlockText {
                          body
                        }
                      }
                    }
                  }
                  ... on MessageExtraConvoParticipant {
                    conversationSubject
                    conversationType
                    conversation {
                      ...SimpleAvatarConvo_conversation
                      type
                      subject
                      participantCount
                      id
                    }
                    participant {
                      ...SimpleAvatarAccount_actor
                      displayId
                      displayName
                      ... on Node {
                        id
                      }
                      id
                    }
                  }
                }
              }

              fragment ConvoSysMessage_message on Message {
                type
                creationTime
                actor {
                  __typename
                  displayName
                  ... on Node {
                    id
                  }
                }
                extra {
                  __typename
                  ... on MessageExtraParticipant {
                    participant {
                      __typename
                      displayName
                      ... on Node {
                        id
                      }
                    }
                  }
                  ... on MessageExtraSubject {
                    subject
                  }
                }
              }

              fragment OrgCubicleMessage_message on Message {
                type
                creationTime
                actor {
                  __typename
                  ...SimpleAvatarAccount_actor
                  displayId
                  displayName
                  ... on Node {
                    id
                  }
                }
                extra {
                  __typename
                  ... on MessageExtraOrg {
                    org {
                      actor {
                        __typename
                        ...SimpleAvatarAccount_actor
                        displayId
                        displayName
                        ... on Node {
                          id
                        }
                      }
                      id
                      memberCount
                    }
                    orgActor {
                      ...SimpleAvatarAccount_actor
                      displayId
                      displayName
                      ... on Node {
                        id
                      }
                      id
                    }
                  }
                  ... on MessageExtraOrgMember {
                    org {
                      actor {
                        __typename
                        ...SimpleAvatarAccount_actor
                        displayId
                        displayName
                        ... on Node {
                          id
                        }
                      }
                      id
                      memberCount
                    }
                    member {
                      ...SimpleAvatarAccount_actor
                      displayId
                      displayName
                      ... on Node {
                        id
                      }
                      id
                    }
                    orgActor {
                      ...SimpleAvatarAccount_actor
                      displayId
                      displayName
                      ... on Node {
                        id
                      }
                      id
                    }
                  }
                }
              }

              fragment AckButton_message on Message {
                acks {
                  __typename
                  ... on Node {
                    id
                  }
                  displayName
                }
                acksCount
                id
                selfAcked
              }

              fragment AttachmentImage_message on Message {
                creationTime
                actor {
                  __typename
                  ... on Node {
                    id
                  }
                }
              }

              fragment BotBlock_message on Message {
                actor {
                  __typename
                  ... on BotActor {
                    logoUrl(height: $botLogoHeight)
                    color
                  }
                  uref
                  ... on Node {
                    id
                  }
                }
              }

              fragment PreviewBlock_message on Message {
                ...BotBlock_message
              }

              fragment TextBlock_message on Message {
                creationTime
                index
              }

              fragment TextBlock_block on MessageBlockText {
                attributes {
                  __typename
                  ... on TextAttributeStyle {
                    length
                    start
                    styles
                    type
                  }
                  ... on TextAttributeHighlight {
                    length
                    references {
                      __typename
                      ... on MessageReferenceAction {
                        type
                        action {
                          id
                          selfAssignee {
                            state
                          }
                        }
                      }
                      ... on MessageReferenceMention {
                        selfMentioned
                        type
                        target {
                          __typename
                          displayId
                          ... on Node {
                            id
                          }
                        }
                      }
                    }
                    start
                    type
                  }
                }
                body
              }

              fragment AttachmentFile_attachment on Attachment {
                id
                filename
                mimetype
                size
                url
                metadata
                originalImage {
                  height
                  width
                }
                thumbnail(width: $thumbSize) {
                  url
                  size
                }
              }

              fragment AttachmentImage_attachment on Attachment {
                metadata
                url
                filename
                mimetype
                processed
                previewImage: thumbnail(width: $previewSize) {
                  url
                  width
                  height
                }
                fullModalImage: thumbnail(width: $fullModalSize) {
                  url
                  width
                  height
                }
              }

              fragment PreviewBlock_previews on UiPayload {
                generator {
                  __typename
                  ...PreviewBlockActor_actor
                  ... on BotActor {
                    color
                  }
                  ... on Node {
                    id
                  }
                }
                ui
              }

              fragment PreviewBlockActor_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }

              fragment InviteToOrgMessage_conversation on Conversation {
                ...ConversationMetrics_conversation
                subject
                ownerOrgId
                ownerOrgAdminSettingsWhenConvoIsAutojoin {
                  invitedEmails
                  joinsRestricted
                  inviteUrl
                }
                owner {
                  __typename
                  ... on NativeActor {
                    id
                  }
                  ... on Node {
                    id
                  }
                }
                type
              }

              fragment AttachmentImage_conversation on Conversation {
                ...ConversationMetrics_conversation
              }
            </query>
          </mainframe>
        </request>

        <!-- This really happens after the subscriptions... -->
        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name="input">
                <string name="activity">TRACKING</string>
                <string name="conversationId">%%_space_id%%</string>
                <string name="clientMutationId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <mutation>
              mutation ConversationRelayUpdateActivityMutation($input: UpdateActivityInput!) {
                updateActivity(input: $input) {
                  clientMutationId
                }
              }
            </mutation>
          </mainframe>
        </request>

      </transaction> <!-- Loading space -->


      <!-- ====================================================================
      == Space subscriptions
      ===================================================================== -->

      <transaction name="space_subscriptions">

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <object name="input">
                <string name="conversationId">%%_space_id%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription ConversationViewParticipantsChangedSubscription($avatarSize: Int!, $input: ParticipantsChangedInput!) {
                participantsChanged(input: $input) {
                  conversation {
                    participants(all: true) {
                      __typename
                      ...BotSubscriptionsModal_bot
                      ...EditConvoRoles_participant
                      actor {
                        __typename
                        avatarUrl(size: $avatarSize)
                        displayId
                        displayName
                          ... on Node {
                          id
                        }
                      }
                    }
                    id
                  }
                }
              }

              fragment BotSubscriptionsModal_bot on BotParticipant {
                actor {
                  __typename
                  displayId
                  uref
                  ... on Node {
                    id
                  }
                }
                subscriptions {
                  creator {
                    displayName
                    id
                  }
                  name
                  subId
                }
              }

              fragment EditConvoRoles_participant on Participant {
                actor {
                  __typename
                  ...TargetActorMetrics_actor
                  ... on Node {
                    id
                  }
                }
                type
                ... on NativeParticipant {
                  isModerator
                }
              }

              fragment TargetActorMetrics_actor on Actor {
                displayId
                displayName
                uref
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name="input">
                <string name="conversationId">%%_space_id%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription ConversationRelayActivityChangedSubscription($input: ActivityChangedInput!) {
                activityChanged(input: $input) {
                  conversation {
                    ...ConversationActivity_conversation
                    id
                  }
                }
              }

              fragment ConversationActivity_conversation on Conversation {
                type
                activities {
                  actors(filter: COMPOSING, max: 6) {
                    __typename
                    displayId
                    ... on Node {
                      id
                    }
                  }
                  total(filter: COMPOSING)
                }
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name="input">
                <string name="conversationId">%%_space_id%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription ConversationRelayParticipantCountChangedSubscription($input: ParticipantCountChangedInput!) {
                participantCountChanged(input: $input) {
                  conversation {
                    participantCount
                    id
                  }
                }
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name="input">
                <string name="conversationId">%%_space_id%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription ConversationRelayPointerChangedSubscription($input: PointerChangedInput!) {
                pointerChanged(input: $input) {
                  conversation {
                    pointer
                    id
                  }
                }
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name="input">
                <string name="conversationId">%%_space_id%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription ConversationRelaySubjectChangedSubscription($input: SubjectChangedInput!) {
                subjectChanged(input: $input) {
                  conversation {
                    subject
                    id
                  }
                }
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name="input">
                <string name="conversationId">%%_space_id%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription ConversationRelayLockedSubscription($input: ConversationLockedInput!) {
                conversationLocked(input: $input) {
                  conversation {
                    locked
                    id
                  }
                }
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name="input">
                <string name="conversationId">%%_space_id%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription ConversationRelayRemovedSubscription($input: ConversationRemovedInput!) {
                conversationRemoved(input: $input) {
                  conversationId
                }
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <number name="botLogoHeight">%%_bot_logo_height%%</number>
              <number name="fullModalSize">%%_full_modal_size%%</number>
              <number name="previewSize">%%_preview_size%%</number>
              <number name="thumbSize">%%_thumb_size%%</number>
              <object name="input">
                <string name="conversationId">%%_space_id%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription ConversationRelayMessageAddedSubscription($avatarSize: Int!, $botLogoHeight: Int!, $fullModalSize: Int!, $input: MessageAddedInput!, , $previewSize: Int!, $thumbSize: Int!) {
                messageAdded(input: $input) {
                  conversation {
                    lastMessageIndex
                    pointer
                    id
                  }
                  messageEdge {
                    cursor
                    node {
                      ...BasicMessage_message
                      ...SysMessage_message
                      actor {
                        __typename
                        ... on Node {
                          id
                        }
                      }
                      availableActions {
                        id
                      }
                      creationTime
                      id
                      index
                      source
                    }
                  }
                }
              }

              fragment BasicMessage_message on Message {
                ...AckButton_message
                ...AttachmentImage_message
                ...BotBlock_message
                ...PreviewBlock_message
                ...TextBlock_message
                actor {
                  __typename
                  ...SimpleAvatarAccount_actor
                  displayId
                  displayName
                  ... on Node {
                    id
                  }
                }
                blocks {
                  __typename
                  ... on MessageBlockText {
                    ...TextBlock_block
                    type
                    key
                  }
                  ... on MessageBlockObject {
                    references {
                      __typename
                      ... on MessageReferenceAttachment {
                        attachment {
                          id
                          mimetype
                          ...AttachmentFile_attachment
                          ...AttachmentImage_attachment
                        }
                      }
                      ... on MessageReferenceLink {
                        metadata
                        url
                      }
                    }
                    type
                    key
                  }
                  ... on MessageBlockUiPayload {
                    key
                    type
                    uiPayload {
                      ui
                    }
                  }
                  ... on MessageBlockPreview {
                    link
                    previews {
                      ...PreviewBlock_previews
                    }
                    type
                    key
                  }
                }
                id
              }

              fragment SysMessage_message on Message {
                ...ActionCubicleMessage_message
                ...ConvoCubicleMessage_message
                ...ConvoSysMessage_message
                ...OrgCubicleMessage_message
                creationTime
                type
              }

              fragment ActionCubicleMessage_message on Message {
                type
                creationTime
                actor {
                  __typename
                  displayId
                  displayName
                  ... on Node {
                    id
                  }
                }
                extra {
                  __typename
                  ... on MessageExtraAction {
                    actionTitle
                    conversationSubject
                    conversationType
                    action {
                      title
                      originId
                      conversation {
                        subject
                        type
                        id
                      }
                      id
                    }
                  }
                }
              }

              fragment ConvoCubicleMessage_message on Message {
                type
                creationTime
                actor {
                  __typename
                  ...SimpleAvatarAccount_actor
                  displayId
                  displayName
                  ... on Node {
                    id
                  }
                }
                extra {
                  __typename
                  ... on MessageExtraConvo {
                    conversationSubject
                    conversationType
                    conversation {
                      ...SimpleAvatarConvo_conversation
                      type
                      subject
                      participantCount
                      id
                    }
                  }
                  ... on MessageExtraConvoMessage {
                    conversationSubject
                    conversationType
                    messageBody
                    conversation {
                      ...SimpleAvatarConvo_conversation
                      type
                      subject
                      participantCount
                      id
                    }
                    message {
                      id
                      blocks {
                        __typename
                        ... on MessageBlockText {
                          body
                        }
                      }
                    }
                  }
                  ... on MessageExtraConvoParticipant {
                    conversationSubject
                    conversationType
                    conversation {
                      ...SimpleAvatarConvo_conversation
                      type
                      subject
                      participantCount
                      id
                    }
                    participant {
                      ...SimpleAvatarAccount_actor
                      displayId
                      displayName
                      ... on Node {
                        id
                      }
                      id
                    }
                  }
                }
              }

              fragment ConvoSysMessage_message on Message {
                type
                creationTime
                actor {
                  __typename
                  displayName
                  ... on Node {
                    id
                  }
                }
                extra {
                  __typename
                  ... on MessageExtraParticipant {
                    participant {
                      __typename
                      displayName
                      ... on Node {
                        id
                      }
                    }
                  }
                  ... on MessageExtraSubject {
                    subject
                  }
                }
              }

              fragment OrgCubicleMessage_message on Message {
                type
                creationTime
                actor {
                  __typename
                  ...SimpleAvatarAccount_actor
                  displayId
                  displayName
                  ... on Node {
                    id
                  }
                }
                extra {
                  __typename
                  ... on MessageExtraOrg {
                    org {
                      actor {
                        __typename
                        ...SimpleAvatarAccount_actor
                        displayId
                        displayName
                        ... on Node {
                          id
                        }
                      }
                      id
                      memberCount
                    }
                    orgActor {
                      ...SimpleAvatarAccount_actor
                      displayId
                      displayName
                      ... on Node {
                        id
                      }
                      id
                    }
                  }
                  ... on MessageExtraOrgMember {
                    org {
                      actor {
                        __typename
                        ...SimpleAvatarAccount_actor
                        displayId
                        displayName
                        ... on Node {
                          id
                        }
                      }
                      id
                      memberCount
                    }
                    member {
                      ...SimpleAvatarAccount_actor
                      displayId
                      displayName
                      ... on Node {
                        id
                      }
                      id
                    }
                    orgActor {
                      ...SimpleAvatarAccount_actor
                      displayId
                      displayName
                      ... on Node {
                        id
                      }
                      id
                    }
                  }
                }
              }

              fragment SimpleAvatarAccount_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }

              fragment SimpleAvatarConvo_conversation on Conversation {
                avatarUrl(size: $avatarSize)
                subject
              }

              fragment AckButton_message on Message {
                acks {
                  __typename
                  ... on Node {
                    id
                  }
                  displayName
                }
                acksCount
                id
                selfAcked
              }

              fragment AttachmentImage_message on Message {
                creationTime
                actor {
                  __typename
                  ... on Node {
                    id
                  }
                }
              }

              fragment BotBlock_message on Message {
                actor {
                  __typename
                  ... on BotActor {
                    logoUrl(height: $botLogoHeight)
                    color
                  }
                  uref
                  ... on Node {
                    id
                  }
                }
              }

              fragment PreviewBlock_message on Message {
                ...BotBlock_message
              }

              fragment TextBlock_message on Message {
                creationTime
                index
              }

              fragment TextBlock_block on MessageBlockText {
                attributes {
                  __typename
                  ... on TextAttributeStyle {
                    length
                    start
                    styles
                    type
                  }
                  ... on TextAttributeHighlight {
                    length
                    references {
                      __typename
                      ... on MessageReferenceAction {
                        type
                        action {
                          id
                          selfAssignee {
                            state
                          }
                        }
                      }
                      ... on MessageReferenceMention {
                        selfMentioned
                        type
                        target {
                          __typename
                          displayId
                          ... on Node {
                            id
                          }
                        }
                      }
                    }
                    start
                    type
                  }
                }
                body
              }

              fragment AttachmentFile_attachment on Attachment {
                id
                filename
                mimetype
                size
                url
                metadata
                originalImage {
                  height
                  width
                }
                thumbnail(width: $thumbSize) {
                  url
                  size
                }
              }

              fragment AttachmentImage_attachment on Attachment {
                metadata
                url
                filename
                mimetype
                processed
                previewImage: thumbnail(width: $previewSize) {
                  url
                  width
                  height
                }
                fullModalImage: thumbnail(width: $fullModalSize) {
                  url
                  width
                  height
                }
              }

              fragment PreviewBlock_previews on UiPayload {
                generator {
                  __typename
                  ...PreviewBlockActor_actor
                  ... on BotActor {
                    color
                  }
                  ... on Node {
                    id
                  }
                }
                ui
              }

              fragment PreviewBlockActor_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name ="input">
                <string name="conversationId">%%_space_id%%</string>
                <string name="startingCursor">%%_space_cursor%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription ConversationRelayActionChangedSubscription($input: ActionChangedInput!) {
               actionChanged(input: $input) {
                 action {
                   id
                   selfAssignee {
                     state
                   }
                 }
               }
               }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <object name ="input">
                <string name="conversationId">%%_space_id%%</string>
                <string name="cursor">%%_space_cursor%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription ConversationRelayMessageAcksChangedSubscription($input: MessageAcksChangedInput!) {
                messageAcksChanged(input: $input) {
                  message {
                    ...AckButton_message
                    id
                  }
                }
              }

              fragment AckButton_message on Message {
                acks {
                  __typename
                  ... on Node {
                    id
                  }
                  displayName
                }
                acksCount
                id
                selfAcked
              }
            </subscription>
          </mainframe>
        </request>

        <request subst="true">
          <mainframe type="graphql">
            <variables>
              <number name="avatarSize">%%_avatar_size%%</number>
              <number name="botLogoHeight">%%_bot_logo_height%%</number>
              <number name="fullModalSize">%%_full_modal_size%%</number>
              <number name="previewSize">%%_preview_size%%</number>
              <number name="thumbSize">%%_thumb_size%%</number>
              <object name ="input">
                <string name="conversationId">%%_space_id%%</string>
                <string name="cursor">%%_space_cursor%%</string>
                <string name="clientSubscriptionId">%%ts_mainframe:uuid%%</string>
              </object>
            </variables>
            <subscription>
              subscription ConversationRelayMessageContentChangedSubscription($avatarSize: Int!, $botLogoHeight: Int!, $fullModalSize: Int!, $input: MessageContentChangedInput!, $previewSize: Int!, $thumbSize: Int!) {
                messageContentChanged(input: $input) {
                  message {
                    ...BasicMessage_message
                    ...SysMessage_message
                    actor {
                      __typename
                      ... on Node {
                        id
                      }
                    }
                    availableActions {
                      id
                    }
                    creationTime
                    id
                    index
                    source
                  }
                }
              }

              fragment BasicMessage_message on Message {
                ...AckButton_message
                ...AttachmentImage_message
                ...BotBlock_message
                ...PreviewBlock_message
                ...TextBlock_message
                actor {
                  __typename
                  ...SimpleAvatarAccount_actor
                  displayId
                  displayName
                  ... on Node {
                    id
                  }
                }
                blocks {
                  __typename
                  ... on MessageBlockText {
                    ...TextBlock_block
                    type
                    key
                  }
                  ... on MessageBlockObject {
                    references {
                      __typename
                      ... on MessageReferenceAttachment {
                        attachment {
                          id
                          mimetype
                          ...AttachmentFile_attachment
                          ...AttachmentImage_attachment
                        }
                      }
                      ... on MessageReferenceLink {
                        metadata
                        url
                      }
                    }
                    type
                    key
                  }
                  ... on MessageBlockUiPayload {
                    key
                    type
                    uiPayload {
                      ui
                    }
                  }
                  ... on MessageBlockPreview {
                    link
                    previews {
                      ...PreviewBlock_previews
                    }
                    type
                    key
                  }
                }
                id
              }

              fragment SysMessage_message on Message {
                ...ActionCubicleMessage_message
                ...ConvoCubicleMessage_message
                ...ConvoSysMessage_message
                ...OrgCubicleMessage_message
                creationTime
                type
              }

              fragment ActionCubicleMessage_message on Message {
                type
                creationTime
                actor {
                  __typename
                  displayId
                  displayName
                  ... on Node {
                    id
                  }
                }
                extra {
                  __typename
                  ... on MessageExtraAction {
                    actionTitle
                    conversationSubject
                    conversationType
                    action {
                      title
                      originId
                      conversation {
                        subject
                        type
                        id
                      }
                      id
                    }
                  }
                }
              }

              fragment ConvoCubicleMessage_message on Message {
                type
                creationTime
                actor {
                  __typename
                  ...SimpleAvatarAccount_actor
                  displayId
                  displayName
                  ... on Node {
                    id
                  }
                }
                extra {
                  __typename
                  ... on MessageExtraConvo {
                    conversationSubject
                    conversationType
                    conversation {
                      ...SimpleAvatarConvo_conversation
                      type
                      subject
                      participantCount
                      id
                    }
                  }
                  ... on MessageExtraConvoMessage {
                    conversationSubject
                    conversationType
                    messageBody
                    conversation {
                      ...SimpleAvatarConvo_conversation
                      type
                      subject
                      participantCount
                      id
                    }
                    message {
                      id
                      blocks {
                        __typename
                        ... on MessageBlockText {
                          body
                        }
                      }
                    }
                  }
                  ... on MessageExtraConvoParticipant {
                    conversationSubject
                    conversationType
                    conversation {
                      ...SimpleAvatarConvo_conversation
                      type
                      subject
                      participantCount
                      id
                    }
                    participant {
                      ...SimpleAvatarAccount_actor
                      displayId
                      displayName
                      ... on Node {
                        id
                      }
                      id
                    }
                  }
                }
              }

              fragment ConvoSysMessage_message on Message {
                type
                creationTime
                actor {
                  __typename
                  displayName
                  ... on Node {
                    id
                  }
                }
                extra {
                  __typename
                  ... on MessageExtraParticipant {
                    participant {
                      __typename
                      displayName
                      ... on Node {
                        id
                      }
                    }
                  }
                  ... on MessageExtraSubject {
                    subject
                  }
                }
              }

              fragment OrgCubicleMessage_message on Message {
                type
                creationTime
                actor {
                  __typename
                  ...SimpleAvatarAccount_actor
                  displayId
                  displayName
                  ... on Node {
                    id
                  }
                }
                extra {
                  __typename
                  ... on MessageExtraOrg {
                    org {
                      actor {
                        __typename
                        ...SimpleAvatarAccount_actor
                        displayId
                        displayName
                          ... on Node {
                            id
                          }
                        }
                        id
                        memberCount
                      }
                      orgActor {
                        ...SimpleAvatarAccount_actor
                        displayId
                        displayName
                        ... on Node {
                          id
                        }
                        id
                      }
                    }
                    ... on MessageExtraOrgMember {
                      org {
                        actor {
                        __typename
                        ...SimpleAvatarAccount_actor
                        displayId
                        displayName
                        ... on Node {
                          id
                        }
                      }
                      id
                      memberCount
                    }
                    member {
                      ...SimpleAvatarAccount_actor
                      displayId
                      displayName
                      ... on Node {
                        id
                      }
                      id
                    }
                    orgActor {
                      ...SimpleAvatarAccount_actor
                      displayId
                      displayName
                      ... on Node {
                        id
                      }
                      id
                    }
                  }
                }
              }

              fragment SimpleAvatarAccount_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }

              fragment SimpleAvatarConvo_conversation on Conversation {
                avatarUrl(size: $avatarSize)
                subject
              }

              fragment AckButton_message on Message {
                acks {
                  __typename
                  ... on Node {
                    id
                  }
                  displayName
                }
                acksCount
                id
                selfAcked
              }

              fragment AttachmentImage_message on Message {
                creationTime
                actor {
                  __typename
                  ... on Node {
                    id
                  }
                }
              }

              fragment BotBlock_message on Message {
                actor {
                  __typename
                  ... on BotActor {
                    logoUrl(height: $botLogoHeight)
                    color
                  }
                  uref
                  ... on Node {
                    id
                  }
                }
              }

              fragment PreviewBlock_message on Message {
                ...BotBlock_message
              }

              fragment TextBlock_message on Message {
                creationTime
                index
              }

              fragment TextBlock_block on MessageBlockText {
                attributes {
                  __typename
                  ... on TextAttributeStyle {
                    length
                    start
                    styles
                    type
                  }
                  ... on TextAttributeHighlight {
                    length
                    references {
                      __typename
                      ... on MessageReferenceAction {
                        type
                        action {
                          id
                          selfAssignee {
                            state
                          }
                        }
                      }
                      ... on MessageReferenceMention {
                        selfMentioned
                        type
                        target {
                          __typename
                          displayId
                          ... on Node {
                            id
                          }
                        }
                      }
                    }
                    start
                    type
                  }
                }
                body
              }

              fragment AttachmentFile_attachment on Attachment {
                id
                filename
                mimetype
                size
                url
                metadata
                originalImage {
                  height
                  width
                }
                thumbnail(width: $thumbSize) {
                  url
                  size
                }
              }

              fragment AttachmentImage_attachment on Attachment {
                metadata
                url
                filename
                mimetype
                processed
                previewImage: thumbnail(width: $previewSize) {
                  url
                  width
                  height
                }
                fullModalImage: thumbnail(width: $fullModalSize) {
                  url
                  width
                  height
                }
              }

              fragment PreviewBlock_previews on UiPayload {
                generator {
                  __typename
                  ...PreviewBlockActor_actor
                  ... on BotActor {
                    color
                  }
                  ... on Node {
                    id
                  }
                }
                ui
              }

              fragment PreviewBlockActor_actor on Actor {
                displayId
                displayName
                avatarUrl(size: $avatarSize)
              }
            </subscription>
          </mainframe>
        </request>

      </transaction> <!-- Space subscriptions -->


      <!-- ====================================================================
      == Sending messages
      ===================================================================== -->

      <transaction name="messages">

        <for from="1" to="&message_count;" incr="1" var="counter">
          <if var="wait_between_messages" eq="true">
            <thinktime value="&time_between_messages;" random="true"></thinktime>
          </if>
          <request subst="true">
            <mainframe type="graphql">
              <variables>
                <number name="avatarSize">%%_avatar_size%%</number>
                <number name="botLogoHeight">%%_bot_logo_height%%</number>
                <number name="fullModalSize">%%_full_modal_size%%</number>
                <number name="previewSize">%%_preview_size%%</number>
                <number name="thumbSize">%%_thumb_size%%</number>
                <object name="input">
                  <string name="conversationId">%%_space_id%%</string>
                  <string name="clientMutationId">%%ts_mainframe:uuid%%</string>
                  <object name="message">
                    <object name="blocks">
                      <list name="objectBlocks"/>
                      <list name="previewBlocks"/>
                      <list name="blockKeyOrder">
                        <string>f2ids</string>
                      </list>
                      <list name="textBlocks">
                        <object>
                          <string name="type">TEXT</string>
                          <string name="key">f2ids</string>
                          <string name="body">some random message</string>
                          <object name="attributes">
                            <list name="highlights"/>
                            <list name="styles"/>
                          </object>
                        </object>
                      </list>
                    </object>
                    <object name="references">
                      <list name="actions"/>
                      <list name="attachments"/>
                      <list name="blocks"/>
                      <list name="mentions"/>
                    </object>
                  </object>
                </object>
              </variables>
              <mutation>
                mutation ComposeContainerCreateMessageMutation($avatarSize: Int!, $botLogoHeight: Int!, $fullModalSize: Int!
                $input: CreateMessageInput!, $previewSize: Int!, $thumbSize: Int!) {
                  createMessage(input: $input) {
                    conversation {
                      lastMessageIndex
                      pointer
                      id
                    }
                    messageEdge {
                      cursor
                      node {
                        ...BasicMessage_message
                        ...SysMessage_message
                        actor {
                          __typename
                          ... on Node {
                            id
                          }
                        }
                        availableActions {
                          id
                        }
                        creationTime
                        id
                        index
                        source
                      }
                    }
                  }
                }

                fragment BasicMessage_message on Message {
                  ...AckButton_message
                  ...AttachmentImage_message
                  ...BotBlock_message
                  ...PreviewBlock_message
                  ...TextBlock_message
                  actor {
                    __typename
                    ...SimpleAvatarAccount_actor
                    displayId
                    displayName
                      ... on Node {
                      id
                    }
                  }
                  blocks {
                    __typename
                    ... on MessageBlockText {
                      ...TextBlock_block
                      type
                      key
                    }
                    ... on MessageBlockObject {
                      references {
                        __typename
                        ... on MessageReferenceAttachment {
                          attachment {
                            id
                            mimetype
                            ...AttachmentFile_attachment
                            ...AttachmentImage_attachment
                          }
                        }
                        ... on MessageReferenceLink {
                          metadata
                          url
                        }
                      }
                      type
                      key
                    }
                    ... on MessageBlockUiPayload {
                      key
                      type
                      uiPayload {
                        ui
                      }
                    }
                    ... on MessageBlockPreview {
                      link
                      previews {
                        ...PreviewBlock_previews
                      }
                      type
                      key
                    }
                  }
                  id
                }

                fragment SysMessage_message on Message {
                  ...ActionCubicleMessage_message
                  ...ConvoCubicleMessage_message
                  ...ConvoSysMessage_message
                  ...OrgCubicleMessage_message
                  creationTime
                  type
                }

                fragment ActionCubicleMessage_message on Message {
                  type
                  creationTime
                  actor {
                    __typename
                    displayId
                    displayName
                    ... on Node {
                      id
                    }
                  }
                  extra {
                    __typename
                    ... on MessageExtraAction {
                      actionTitle
                      conversationSubject
                      conversationType
                      action {
                        title
                        originId
                        conversation {
                          subject
                          type
                          id
                        }
                        id
                      }
                    }
                  }
                }

                fragment ConvoCubicleMessage_message on Message {
                  type
                  creationTime
                  actor {
                    __typename
                    ...SimpleAvatarAccount_actor
                    displayId
                    displayName
                    ... on Node {
                      id
                    }
                  }
                  extra {
                    __typename
                    ... on MessageExtraConvo {
                      conversationSubject
                      conversationType
                      conversation {
                        ...SimpleAvatarConvo_conversation
                        type
                        subject
                        participantCount
                        id
                      }
                    }
                    ... on MessageExtraConvoMessage {
                      conversationSubject
                      conversationType
                      messageBody
                      conversation {
                        ...SimpleAvatarConvo_conversation
                        type
                        subject
                        participantCount
                        id
                      }
                      message {
                        id
                        blocks {
                          __typename
                          ... on MessageBlockText {
                            body
                          }
                        }
                      }
                    }
                    ... on MessageExtraConvoParticipant {
                      conversationSubject
                      conversationType
                      conversation {
                        ...SimpleAvatarConvo_conversation
                        type
                        subject
                        participantCount
                        id
                      }
                      participant {
                        ...SimpleAvatarAccount_actor
                        displayId
                        displayName
                        ... on Node {
                          id
                        }
                        id
                      }
                    }
                  }
                }

                fragment ConvoSysMessage_message on Message {
                  type
                  creationTime
                  actor {
                    __typename
                    displayName
                    ... on Node {
                      id
                    }
                  }
                  extra {
                    __typename
                    ... on MessageExtraParticipant {
                      participant {
                        __typename
                        displayName
                        ... on Node {
                          id
                        }
                      }
                    }
                    ... on MessageExtraSubject {
                      subject
                    }
                  }
                }

                fragment OrgCubicleMessage_message on Message {
                  type
                  creationTime
                  actor {
                    __typename
                    ...SimpleAvatarAccount_actor
                    displayId
                    displayName
                    ... on Node {
                      id
                    }
                  }
                  extra {
                    __typename
                    ... on MessageExtraOrg {
                      org {
                        actor {
                          __typename
                          ...SimpleAvatarAccount_actor
                          displayId
                          displayName
                          ... on Node {
                            id
                          }
                        }
                        id
                        memberCount
                      }
                      orgActor {
                        ...SimpleAvatarAccount_actor
                        displayId
                        displayName
                        ... on Node {
                          id
                        }
                        id
                      }
                    }
                    ... on MessageExtraOrgMember {
                      org {
                        actor {
                          __typename
                          ...SimpleAvatarAccount_actor
                          displayId
                          displayName
                          ... on Node {
                            id
                          }
                        }
                        id
                        memberCount
                      }
                      member {
                        ...SimpleAvatarAccount_actor
                        displayId
                        displayName
                        ... on Node {
                          id
                        }
                        id
                      }
                      orgActor {
                        ...SimpleAvatarAccount_actor
                        displayId
                        displayName
                        ... on Node {
                          id
                        }
                        id
                      }
                    }
                  }
                }

                fragment SimpleAvatarAccount_actor on Actor {
                  displayId
                  displayName
                  avatarUrl(size: $avatarSize)
                }

                fragment SimpleAvatarConvo_conversation on Conversation {
                  avatarUrl(size: $avatarSize)
                  subject
                }

                fragment AckButton_message on Message {
                  acks {
                    __typename
                    ... on Node {
                      id
                    }
                    displayName
                  }
                  acksCount
                  id
                  selfAcked
                }

                fragment AttachmentImage_message on Message {
                  creationTime
                  actor {
                    __typename
                    ... on Node {
                      id
                    }
                  }
                }

                fragment BotBlock_message on Message {
                  actor {
                    __typename
                    ... on BotActor {
                      logoUrl(height: $botLogoHeight)
                      color
                    }
                    uref
                    ... on Node {
                      id
                    }
                  }
                }

                fragment PreviewBlock_message on Message {
                  ...BotBlock_message
                }

                fragment TextBlock_message on Message {
                  creationTime
                  index
                }

                fragment TextBlock_block on MessageBlockText {
                  attributes {
                    __typename
                    ... on TextAttributeStyle {
                      length
                      start
                      styles
                      type
                    }
                    ... on TextAttributeHighlight {
                      length
                      references {
                        __typename
                        ... on MessageReferenceAction {
                          type
                          action {
                            id
                            selfAssignee {
                              state
                            }
                          }
                        }
                        ... on MessageReferenceMention {
                          selfMentioned
                          type
                          target {
                            __typename
                            displayId
                            ... on Node {
                              id
                            }
                          }
                        }
                      }
                      start
                      type
                    }
                  }
                  body
                }

                fragment AttachmentFile_attachment on Attachment {
                  id
                  filename
                  mimetype
                  size
                  url
                  metadata
                  originalImage {
                    height
                    width
                  }
                  thumbnail(width: $thumbSize) {
                    url
                    size
                  }
                }

                fragment AttachmentImage_attachment on Attachment {
                  metadata
                  url
                  filename
                  mimetype
                  processed
                  previewImage: thumbnail(width: $previewSize) {
                    url
                    width
                    height
                  }
                  fullModalImage: thumbnail(width: $fullModalSize) {
                    url
                    width
                    height
                  }
                }

                fragment PreviewBlock_previews on UiPayload {
                  generator {
                    __typename
                    ...PreviewBlockActor_actor
                    ... on BotActor {
                      color
                      }
                      ... on Node {
                      id
                    }
                  }
                  ui
                }

                fragment PreviewBlockActor_actor on Actor {
                  displayId
                  displayName
                  avatarUrl(size: $avatarSize)
                }
              </mutation>
            </mainframe>
          </request>
        </for>
      </transaction>


      <!-- ====================================================================
      == Terminating
      ===================================================================== -->

      <transaction name="disconnect">

        <request>
          <mainframe type="close"/>
        </request>

      </transaction> <!-- Terminating -->

    </session>
  </sessions>
</tsung>
